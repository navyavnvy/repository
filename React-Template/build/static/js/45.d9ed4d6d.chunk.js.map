{"version":3,"sources":["views/components/extra/examples/dndVerticalList.js","views/components/extra/examples/dndHorizontalList.js","views/components/extra/examples/dndMultipleTarget.js","views/components/extra/exampleSource/dndMultipleTarget.js","views/components/extra/dragAndDrop.js","components/contentHead/contentHeader.js","components/contentHead/contentSubHeader.js","components/tabs/customTabs.js"],"names":["getItems","count","Array","from","length","v","k","map","id","concat","content","Component","offset","arguments","undefined","reorder","list","startIndex","endIndex","result","_result$splice","splice","removed","Object","slicedToArray","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","_sourceClone$splice","index","droppableId","getItemStyle","isDragging","draggableStyle","objectSpread","userSelect","padding","grid","margin","background","getListStyle","isDraggingOver","width","multipleTarget","state","items","selected","id2List","droppable","droppable2","getList","_this","onDragEnd","setState","_this2","this","react_default","a","createElement","className","react_beautiful_dnd_esm","provided","snapshot","ref","innerRef","style","item","key","draggableId","assign","draggableProps","dragHandleProps","placeholder","MultipleTargetSource","DragAndDrop","react","reactstrap_es","md","lg","dndMultipleTarget","lib","text","onCopy","copied","react_prism_lib","component","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","ContentHeader","props","children","ContentSubHeader","Example","D_React_Template_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_super","call","toggle","bind","D_React_Template_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__","activeTab","tab","react__WEBPACK_IMPORTED_MODULE_6___default","reactstrap__WEBPACK_IMPORTED_MODULE_8__","tabs","classnames","active","onClick","react_feather__WEBPACK_IMPORTED_MODULE_7__","size","tabId","sm","TabContent1","TabContent2","React"],"mappings":"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","file":"static/js/45.d9ed4d6d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\n// fake data generator\r\nconst getItems = count =>\r\n   Array.from({ length: count }, (v, k) => k).map(k => ({\r\n      id: `item-${k}`,\r\n      content: `item ${k}`\r\n   }));\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n   const result = Array.from(list);\r\n   const [removed] = result.splice(startIndex, 1);\r\n   result.splice(endIndex, 0, removed);\r\n\r\n   return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n   // some basic styles to make the items look a bit nicer\r\n   userSelect: \"none\",\r\n   padding: grid * 2,\r\n   margin: `0 0 ${grid}px 0`,\r\n\r\n   // change background colour if dragging\r\n   background: isDragging ? \"lightgreen\" : \"grey\",\r\n\r\n   // styles we need to apply on draggables\r\n   ...draggableStyle\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n   background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\r\n   padding: grid,\r\n   width: 250\r\n});\r\n\r\nclass VerticalList extends Component {\r\n   constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n         items: getItems(6)\r\n      };\r\n      this.onDragEnd = this.onDragEnd.bind(this);\r\n   }\r\n\r\n   onDragEnd(result) {\r\n      // dropped outside the list\r\n      if (!result.destination) {\r\n         return;\r\n      }\r\n\r\n      const items = reorder(\r\n         this.state.items,\r\n         result.source.index,\r\n         result.destination.index\r\n      );\r\n\r\n      this.setState({\r\n         items\r\n      });\r\n   }\r\n\r\n   // Normally you would want to split things out into separate components.\r\n   // But in this example everything is just done in one place for simplicity\r\n   render() {\r\n      return (\r\n         <DragDropContext onDragEnd={this.onDragEnd}>\r\n            <Droppable droppableId=\"droppable\">\r\n               {(provided, snapshot) => (\r\n                  <div\r\n                     ref={provided.innerRef}\r\n                     style={getListStyle(snapshot.isDraggingOver)}\r\n                  >\r\n                     {this.state.items.map((item, index) => (\r\n                        <Draggable\r\n                           key={item.id}\r\n                           draggableId={item.id}\r\n                           index={index}\r\n                        >\r\n                           {(provided, snapshot) => (\r\n                              <div className=\"white bg-success\"\r\n                                 ref={provided.innerRef}\r\n                                 {...provided.draggableProps}\r\n                                 {...provided.dragHandleProps}\r\n                                 style={getItemStyle(\r\n                                    snapshot.isDragging,\r\n                                    provided.draggableProps.style\r\n                                 )}\r\n                              >\r\n                                 {item.content}\r\n                              </div>\r\n                           )}\r\n                        </Draggable>\r\n                     ))}\r\n                     {provided.placeholder}\r\n                  </div>\r\n               )}\r\n            </Droppable>\r\n         </DragDropContext>\r\n      );\r\n   }\r\n}\r\n\r\nexport default VerticalList;\r\n","import React, { Component } from \"react\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\n// fake data generator\r\nconst getItems = count =>\r\n   Array.from({ length: count }, (v, k) => k).map(k => ({\r\n      id: `item-${k}`,\r\n      content: `item ${k}`\r\n   }));\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n   const result = Array.from(list);\r\n   const [removed] = result.splice(startIndex, 1);\r\n   result.splice(endIndex, 0, removed);\r\n\r\n   return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n   // some basic styles to make the items look a bit nicer\r\n   userSelect: \"none\",\r\n   padding: grid * 2,\r\n   margin: `0 ${grid}px 0 0`,\r\n\r\n   // change background colour if dragging\r\n   background: isDragging ? \"lightgreen\" : \"grey\",\r\n\r\n   // styles we need to apply on draggables\r\n   ...draggableStyle\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n   background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\r\n   display: \"flex\",\r\n   padding: grid,\r\n   overflow: \"auto\"\r\n});\r\n\r\nclass HorizontalList extends Component {\r\n   constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n         items: getItems(6)\r\n      };\r\n      this.onDragEnd = this.onDragEnd.bind(this);\r\n   }\r\n\r\n   onDragEnd(result) {\r\n      // dropped outside the list\r\n      if (!result.destination) {\r\n         return;\r\n      }\r\n\r\n      const items = reorder(\r\n         this.state.items,\r\n         result.source.index,\r\n         result.destination.index\r\n      );\r\n\r\n      this.setState({\r\n         items\r\n      });\r\n   }\r\n\r\n   // Normally you would want to split things out into separate components.\r\n   // But in this example everything is just done in one place for simplicity\r\n   render() {\r\n      return (\r\n         <DragDropContext onDragEnd={this.onDragEnd}>\r\n            <Droppable droppableId=\"droppable\" direction=\"horizontal\">\r\n               {(provided, snapshot) => (\r\n                  <div\r\n                     ref={provided.innerRef}\r\n                     style={getListStyle(snapshot.isDraggingOver)}\r\n                     {...provided.droppableProps}\r\n                  >\r\n                     {this.state.items.map((item, index) => (\r\n                        <Draggable\r\n                           key={item.id}\r\n                           draggableId={item.id}\r\n                           index={index}\r\n                        >\r\n                           {(provided, snapshot) => (\r\n                              <div className=\"white bg-success\"\r\n                                 ref={provided.innerRef}\r\n                                 {...provided.draggableProps}\r\n                                 {...provided.dragHandleProps}\r\n                                 style={getItemStyle(\r\n                                    snapshot.isDragging,\r\n                                    provided.draggableProps.style\r\n                                 )}\r\n                              >\r\n                                 {item.content}\r\n                              </div>\r\n                           )}\r\n                        </Draggable>\r\n                     ))}\r\n                     {provided.placeholder}\r\n                  </div>\r\n               )}\r\n            </Droppable>\r\n         </DragDropContext>\r\n      );\r\n   }\r\n}\r\n\r\nexport default HorizontalList;\r\n","import React, { Component } from \"react\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\n// fake data generator\r\nconst getItems = (count, offset = 0) =>\r\n   Array.from({ length: count }, (v, k) => k).map(k => ({\r\n      id: `item-${k + offset}`,\r\n      content: `item ${k + offset}`\r\n   }));\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n   const result = Array.from(list);\r\n   const [removed] = result.splice(startIndex, 1);\r\n   result.splice(endIndex, 0, removed);\r\n\r\n   return result;\r\n};\r\n\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n   const sourceClone = Array.from(source);\r\n   const destClone = Array.from(destination);\r\n   const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n   destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n   const result = {};\r\n   result[droppableSource.droppableId] = sourceClone;\r\n   result[droppableDestination.droppableId] = destClone;\r\n\r\n   return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n   // some basic styles to make the items look a bit nicer\r\n   userSelect: \"none\",\r\n   padding: grid * 2,\r\n   margin: `0 0 ${grid}px 0`,\r\n\r\n   // change background colour if dragging\r\n   background: isDragging ? \"lightgreen\" : \"grey\",\r\n\r\n   // styles we need to apply on draggables\r\n   ...draggableStyle\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n   background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\r\n   padding: grid,\r\n   width: 250\r\n});\r\n\r\nclass multipleTarget extends Component {\r\n   state = {\r\n      items: getItems(10),\r\n      selected: getItems(5, 10)\r\n   };\r\n\r\n   /**\r\n    * A semi-generic way to handle multiple lists. Matches\r\n    * the IDs of the droppable container to the names of the\r\n    * source arrays stored in the state.\r\n    */\r\n   id2List = {\r\n      droppable: \"items\",\r\n      droppable2: \"selected\"\r\n   };\r\n\r\n   getList = id => this.state[this.id2List[id]];\r\n\r\n   onDragEnd = result => {\r\n      const { source, destination } = result;\r\n\r\n      // dropped outside the list\r\n      if (!destination) {\r\n         return;\r\n      }\r\n\r\n      if (source.droppableId === destination.droppableId) {\r\n         const items = reorder(\r\n            this.getList(source.droppableId),\r\n            source.index,\r\n            destination.index\r\n         );\r\n\r\n         let state = { items };\r\n\r\n         if (source.droppableId === \"droppable2\") {\r\n            state = { selected: items };\r\n         }\r\n\r\n         this.setState(state);\r\n      } else {\r\n         const result = move(\r\n            this.getList(source.droppableId),\r\n            this.getList(destination.droppableId),\r\n            source,\r\n            destination\r\n         );\r\n\r\n         this.setState({\r\n            items: result.droppable,\r\n            selected: result.droppable2\r\n         });\r\n      }\r\n   };\r\n\r\n   // Normally you would want to split things out into separate components.\r\n   // But in this example everything is just done in one place for simplicity\r\n   render() {\r\n      return (\r\n         <div className=\"d-flex justify-content-around\">\r\n            <DragDropContext onDragEnd={this.onDragEnd}>\r\n            <Droppable droppableId=\"droppable\">\r\n               {(provided, snapshot) => (\r\n                  <div\r\n                     ref={provided.innerRef}\r\n                     style={getListStyle(snapshot.isDraggingOver)}\r\n                  >\r\n                     {this.state.items.map((item, index) => (\r\n                        <Draggable\r\n                           key={item.id}\r\n                           draggableId={item.id}\r\n                           index={index}\r\n                        >\r\n                           {(provided, snapshot) => (\r\n                              <div className=\"white bg-success\"\r\n                                 ref={provided.innerRef}\r\n                                 {...provided.draggableProps}\r\n                                 {...provided.dragHandleProps}\r\n                                 style={getItemStyle(\r\n                                    snapshot.isDragging,\r\n                                    provided.draggableProps.style\r\n                                 )}\r\n                              >\r\n                                 {item.content}\r\n                              </div>\r\n                           )}\r\n                        </Draggable>\r\n                     ))}\r\n                     {provided.placeholder}\r\n                  </div>\r\n               )}\r\n            </Droppable>\r\n            <Droppable droppableId=\"droppable2\">\r\n               {(provided, snapshot) => (\r\n                  <div\r\n                     ref={provided.innerRef}\r\n                     style={getListStyle(snapshot.isDraggingOver)}\r\n                  >\r\n                     {this.state.selected.map((item, index) => (\r\n                        <Draggable\r\n                           key={item.id}\r\n                           draggableId={item.id}\r\n                           index={index}\r\n                        >\r\n                           {(provided, snapshot) => (\r\n                              <div className=\"white bg-danger\"\r\n                                 ref={provided.innerRef}\r\n                                 {...provided.draggableProps}\r\n                                 {...provided.dragHandleProps}\r\n                                 style={getItemStyle(\r\n                                    snapshot.isDragging,\r\n                                    provided.draggableProps.style\r\n                                 )}\r\n                              >\r\n                                 {item.content}\r\n                              </div>\r\n                           )}\r\n                        </Draggable>\r\n                     ))}\r\n                     {provided.placeholder}\r\n                  </div>\r\n               )}\r\n            </Droppable>\r\n         </DragDropContext>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default multipleTarget;\r\n","const MultipleTargetSource = `import React, { Component } from \"react\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\n// fake data generator\r\nconst getItems = (count, offset = 0) =>\r\n   Array.from({ length: count }, (v, k) => k).map(k => ({\r\n      id: \\`item-\\${k + offset}\\`,\r\n      content: \\`item \\${k + offset}\\`\r\n   }));\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n   const result = Array.from(list);\r\n   const [removed] = result.splice(startIndex, 1);\r\n   result.splice(endIndex, 0, removed);\r\n\r\n   return result;\r\n};\r\n\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n   const sourceClone = Array.from(source);\r\n   const destClone = Array.from(destination);\r\n   const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n   destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n   const result = {};\r\n   result[droppableSource.droppableId] = sourceClone;\r\n   result[droppableDestination.droppableId] = destClone;\r\n\r\n   return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n   // some basic styles to make the items look a bit nicer\r\n   userSelect: \"none\",\r\n   padding: grid * 2,\r\n   margin: \\`0 0 \\${grid}px 0\\`,\r\n\r\n   // change background colour if dragging\r\n   background: isDragging ? \"lightgreen\" : \"grey\",\r\n\r\n   // styles we need to apply on draggables\r\n   ...draggableStyle\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n   background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\r\n   padding: grid,\r\n   width: 250\r\n});\r\n\r\nclass multipleTarget extends Component {\r\n   state = {\r\n      items: getItems(10),\r\n      selected: getItems(5, 10)\r\n   };\r\n\r\n   /**\r\n    * A semi-generic way to handle multiple lists. Matches\r\n    * the IDs of the droppable container to the names of the\r\n    * source arrays stored in the state.\r\n    */\r\n   id2List = {\r\n      droppable: \"items\",\r\n      droppable2: \"selected\"\r\n   };\r\n\r\n   getList = id => this.state[this.id2List[id]];\r\n\r\n   onDragEnd = result => {\r\n      const { source, destination } = result;\r\n\r\n      // dropped outside the list\r\n      if (!destination) {\r\n         return;\r\n      }\r\n\r\n      if (source.droppableId === destination.droppableId) {\r\n         const items = reorder(\r\n            this.getList(source.droppableId),\r\n            source.index,\r\n            destination.index\r\n         );\r\n\r\n         let state = { items };\r\n\r\n         if (source.droppableId === \"droppable2\") {\r\n            state = { selected: items };\r\n         }\r\n\r\n         this.setState(state);\r\n      } else {\r\n         const result = move(\r\n            this.getList(source.droppableId),\r\n            this.getList(destination.droppableId),\r\n            source,\r\n            destination\r\n         );\r\n\r\n         this.setState({\r\n            items: result.droppable,\r\n            selected: result.droppable2\r\n         });\r\n      }\r\n   };\r\n\r\n   // Normally you would want to split things out into separate components.\r\n   // But in this example everything is just done in one place for simplicity\r\n   render() {\r\n      return (\r\n         <DragDropContext onDragEnd={this.onDragEnd}>\r\n            <Droppable droppableId=\"droppable\">\r\n               {(provided, snapshot) => (\r\n                  <div\r\n                     ref={provided.innerRef}\r\n                     style={getListStyle(snapshot.isDraggingOver)}\r\n                  >\r\n                     {this.state.items.map((item, index) => (\r\n                        <Draggable\r\n                           key={item.id}\r\n                           draggableId={item.id}\r\n                           index={index}\r\n                        >\r\n                           {(provided, snapshot) => (\r\n                              <div\r\n                                 ref={provided.innerRef}\r\n                                 {...provided.draggableProps}\r\n                                 {...provided.dragHandleProps}\r\n                                 style={getItemStyle(\r\n                                    snapshot.isDragging,\r\n                                    provided.draggableProps.style\r\n                                 )}\r\n                              >\r\n                                 {item.content}\r\n                              </div>\r\n                           )}\r\n                        </Draggable>\r\n                     ))}\r\n                     {provided.placeholder}\r\n                  </div>\r\n               )}\r\n            </Droppable>\r\n            <Droppable droppableId=\"droppable2\">\r\n               {(provided, snapshot) => (\r\n                  <div\r\n                     ref={provided.innerRef}\r\n                     style={getListStyle(snapshot.isDraggingOver)}\r\n                  >\r\n                     {this.state.selected.map((item, index) => (\r\n                        <Draggable\r\n                           key={item.id}\r\n                           draggableId={item.id}\r\n                           index={index}\r\n                        >\r\n                           {(provided, snapshot) => (\r\n                              <div\r\n                                 ref={provided.innerRef}\r\n                                 {...provided.draggableProps}\r\n                                 {...provided.dragHandleProps}\r\n                                 style={getItemStyle(\r\n                                    snapshot.isDragging,\r\n                                    provided.draggableProps.style\r\n                                 )}\r\n                              >\r\n                                 {item.content}\r\n                              </div>\r\n                           )}\r\n                        </Draggable>\r\n                     ))}\r\n                     {provided.placeholder}\r\n                  </div>\r\n               )}\r\n            </Droppable>\r\n         </DragDropContext>\r\n      );\r\n   }\r\n}\r\nexport default multipleTarget;\r\n`;\r\nexport default MultipleTargetSource;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { Card, CardBody, CardTitle, Row, Col } from \"reactstrap\";\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\r\n//Prism\r\n// eslint-disable-next-line\r\nimport Prism from \"prismjs\";  //Include JS\r\nimport \"prismjs/themes/prism-okaidia.css\"; //Include CSS\r\nimport { PrismCode } from \"react-prism\"; //Prism Component\r\n\r\nimport CustomTabs from \"../../../components/tabs/customTabs\";\r\nimport ContentHeader from \"../../../components/contentHead/contentHeader\";\r\nimport ContentSubHeader from \"../../../components/contentHead/contentSubHeader\";\r\n\r\n// Import examples\r\nimport VerticalList from \"./examples/dndVerticalList\";\r\nimport HorizontalList from \"./examples/dndHorizontalList\";\r\nimport MultipleTarget from \"./examples/dndMultipleTarget\";\r\n\r\n// Import Example Source Code\r\nimport VerticalListSource from \"./exampleSource/dndVerticalList\";\r\nimport HorizontalListSource from \"./exampleSource/dndHorizontalList\";\r\nimport MultipleTargetSource from \"./exampleSource/dndMultipleTarget\";\r\n\r\nclass DragAndDrop extends Component {\r\n   render() {\r\n      return (\r\n         <Fragment>\r\n            <Row>\r\n               <Col md=\"12\" lg=\"12\">\r\n                  <Card>\r\n                     <CardBody>\r\n                        <CardTitle>Multiple Drop Targets</CardTitle>\r\n                        <Col md=\"12\" lg=\"6\" className=\"leftDiv\">\r\n                           <MultipleTarget />\r\n                           <div className=\"\">\r\n                              <div className=\"installation\">Installation</div>                     \r\n                              <Col md=\"12\" className=\"leftDiv\">\r\n                                 <div className=\"installation-steps\">\r\n                                    <div className=\"installation-text\">Download and install the package. Use Node.js v8.0.0 or later.</div>\r\n                                    <div className=\"installation-box\">npm install --save reactstrap react react-dom\r\n                                       <br/>\r\n                                       npm install react-beautiful-dnd\r\n                                    </div>\r\n                                 </div>\r\n                              </Col>\r\n                           </div>\r\n                        </Col>\r\n                        <Col md=\"12\" lg=\"6\" className=\"rightDiv\">\r\n                           <CopyToClipboard text={MultipleTargetSource}\r\n                              onCopy={() => this.setState({copied: true})}>\r\n                              <span className=\"copy-code\">Copy Code</span>\r\n                           </CopyToClipboard>\r\n                           <PrismCode\r\n                              component=\"pre\"\r\n                              className=\"language-javascript\"\r\n                           >\r\n                              {MultipleTargetSource}\r\n                           </PrismCode>\r\n                           \r\n                        </Col>\r\n                        \r\n                     </CardBody>\r\n                  </Card>\r\n               </Col>               \r\n            </Row>\r\n            {/* <Row>\r\n               <Col sm=\"12\" md=\"6\">\r\n                  <Card>\r\n                     <CardBody>\r\n                        <CardTitle>Vertical List</CardTitle>\r\n                        <CustomTabs\r\n                           TabContent1={<VerticalList />}\r\n                           TabContent2={\r\n                              <PrismCode\r\n                                 component=\"pre\"\r\n                                 className=\"language-javascript\"\r\n                              >\r\n                                 {VerticalListSource}\r\n                              </PrismCode>\r\n                           }\r\n                        />\r\n                     </CardBody>\r\n                  </Card>\r\n               </Col>\r\n\r\n               <Col sm=\"12\" md=\"6\">\r\n                  <Card>\r\n                     <CardBody>\r\n                        <CardTitle>Horizontal List</CardTitle>\r\n                        <CustomTabs\r\n                           TabContent1={<HorizontalList />}\r\n                           TabContent2={\r\n                              <PrismCode\r\n                                 component=\"pre\"\r\n                                 className=\"language-javascript\"\r\n                              >\r\n                                 {HorizontalListSource}\r\n                              </PrismCode>\r\n                           }\r\n                        />\r\n                     </CardBody>\r\n                  </Card>\r\n               </Col>\r\n            </Row>\r\n\r\n            <Row>\r\n               <Col sm=\"12\">\r\n                  <Card>\r\n                     <CardBody>\r\n                        <CardTitle>Multiple Drop Targets</CardTitle>\r\n                        <CustomTabs\r\n                           TabContent1={<MultipleTarget />}\r\n                           TabContent2={\r\n                              <PrismCode\r\n                                 component=\"pre\"\r\n                                 className=\"language-javascript\"\r\n                              >\r\n                                 {MultipleTargetSource}\r\n                              </PrismCode>\r\n                           }\r\n                        />\r\n                     </CardBody>\r\n                  </Card>\r\n               </Col>\r\n            </Row> */}\r\n         </Fragment>\r\n      );\r\n   }\r\n}\r\n\r\nexport default DragAndDrop;\r\n","import React from \"react\";\r\n\r\nconst ContentHeader = props => {\r\n  const {className} = props;\r\n   return (\r\n      <div\r\n         className={`content-header${\r\n            className === undefined ? \"\" : ` ${className}`\r\n         }`}\r\n      >\r\n         {props.children}\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default ContentHeader;\r\n","import React from \"react\";\r\n\r\nconst ContentSubHeader = props => {\r\n   const { className } = props;\r\n   return (\r\n      <div\r\n         className={`content-sub-header${\r\n            className === undefined ? \"\" : ` ${className}`\r\n         }`}\r\n      >\r\n         {props.children}\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default ContentSubHeader;\r\n","import React from \"react\";\r\nimport { Eye, Code } from 'react-feather';\r\nimport {\r\n   TabContent,\r\n   TabPane,\r\n   Nav,\r\n   NavItem,\r\n   NavLink,   \r\n   Row,\r\n   Col\r\n} from \"reactstrap\";\r\nimport classnames from \"classnames\";\r\n\r\nexport default class Example extends React.Component {\r\n   constructor(props) {\r\n      super(props);\r\n\r\n      this.toggle = this.toggle.bind(this);\r\n      this.state = {\r\n         activeTab: \"1\"\r\n      };\r\n   }\r\n\r\n   toggle(tab) {\r\n      if (this.state.activeTab !== tab) {\r\n         this.setState({\r\n            activeTab: tab\r\n         });\r\n      }\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <div className=\"nav-tabs-vc\">\r\n            <Nav tabs>\r\n               <NavItem>\r\n                  <NavLink\r\n                     className={classnames({\r\n                        active: this.state.activeTab === \"1\"\r\n                     })}\r\n                     onClick={() => {\r\n                        this.toggle(\"1\");\r\n                     }}\r\n                  >\r\n                     <Eye size={18} />\r\n                  </NavLink>\r\n               </NavItem>\r\n               <NavItem>\r\n                  <NavLink\r\n                     className={classnames({\r\n                        active: this.state.activeTab === \"2\"\r\n                     })}\r\n                     onClick={() => {\r\n                        this.toggle(\"2\");\r\n                     }}\r\n                  >\r\n                     <Code size={18} />\r\n                  </NavLink>\r\n               </NavItem>\r\n            </Nav>\r\n            \r\n            <TabContent activeTab={this.state.activeTab} className=\"px-0\">\r\n               <TabPane tabId=\"1\">\r\n                  <Row>\r\n                     <Col sm=\"12\">\r\n                        {this.props.TabContent1}\r\n                     </Col>\r\n                  </Row>\r\n               </TabPane>\r\n               <TabPane tabId=\"2\">\r\n                  <Row>\r\n                     <Col sm=\"12\">\r\n                        {this.props.TabContent2}\r\n                     </Col>\r\n                  </Row>\r\n               </TabPane>\r\n            </TabContent>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n"],"sourceRoot":""}